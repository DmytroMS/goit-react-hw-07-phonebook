{"version":3,"sources":["Components/ContactList/ContactList.module.css","Components/FilterInput/Filter.module.css","redux/contacts/contactsActions.js","servises/mockApi.js","redux/contacts/contactsOperations.js","redux/contacts/contactsReducer.js","redux/store.js","redux/contacts/contactsSelectors.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactTemplate.js","Components/ContactList/ContactList.js","Components/FilterInput/FilterInput.js","App.js","index.js","Components/ContactForm/Contacts.module.css"],"names":["module","exports","filterContacts","createAction","getContactsFromApi","a","axios","get","data","deleteContactsFromApi","id","delete","addContactsInApi","contact","post","defaults","baseURL","addContacts","createAsyncThunk","mockApi","deleteContacts","fetchContacts","contacts","contactsReducer","createReducer","fulfilled","state","payload","filter","_","filterReducer","loading","pending","rejected","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","devTools","getContacts","getVisibleContact","createSelector","normalizedFilter","toLowerCase","name","includes","phone","InputForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","e","currentTarget","value","className","f","forma","onSubmit","preventDefault","map","alert","forma__label","forma__input","type","pattern","title","required","onChange","forma__btn","ContactItem","s","contact__item","contact__btn","onClick","ContactList","useEffect","Filter","filteredID","shortid","generate","htmlFor","target","filter__input","App","container","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e941fe3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__item\":\"ContactList_contact__item__oo7Ps\",\"contact\":\"ContactList_contact__iWvrm\",\"contact__btn\":\"ContactList_contact__btn__HJxXr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__input\":\"Filter_filter__input__2ztTe\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const filterContacts = createAction('contact-filter');","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = 'https://61934495d3ae6d0017da8452.mockapi.io';\r\n\r\n\r\nexport async function getContactsFromApi() {\r\n  const { data } = await axios.get('/contacts');\r\n  return data;\r\n}\r\n\r\nexport async function deleteContactsFromApi(id) {\r\n  const { data } = await axios.delete(`/contacts/${id}`);\r\n  return data;\r\n}\r\n\r\nexport async function addContactsInApi(contact) {\r\n  const { data } = await axios.post('/contacts', contact);\r\n  return data;\r\n}","import * as mockApi  from '../../servises/mockApi';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const addContacts = createAsyncThunk(\r\n  'contact/addContacts',\r\n  async (contact) => {\r\n    const data = await mockApi.addContactsInApi(contact);\r\n    return data;\r\n  },\r\n);\r\n\r\n\r\n//delete contact\r\nexport const deleteContacts = createAsyncThunk(\r\n  'contact/deleteContacts',\r\n  async (id) => {\r\n    await mockApi.deleteContactsFromApi(id);\r\n    return id;\r\n  },\r\n);\r\n//get contacts api\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contact/fetchContacts',\r\n  async () => {\r\n    const contacts = await mockApi.getContactsFromApi();\r\n    return contacts;\r\n  },\r\n);","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport { filterContacts } from './contactsActions';\r\nimport {\r\n  fetchContacts,\r\n  deleteContacts,\r\n  addContacts,\r\n} from './contactsOperations';\r\n\r\nconst contactsReducer = createReducer([], {\r\n  //add\r\n  [addContacts.fulfilled]: (state, { payload }) => [...state, payload],\r\n  //delete, selected through filter contact by id\r\n  [deleteContacts.fulfilled]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n  //get contacts api\r\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n});\r\n//filter contacts\r\nconst filterReducer = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  //add\r\n  [addContacts.pending]: () => true,\r\n  [addContacts.rejected]: () => false,\r\n  [addContacts.fulfilled]: () => false,\r\n  //delete\r\n  [deleteContacts.pending]: () => true,\r\n  [deleteContacts.rejected]: () => false,\r\n  [deleteContacts.fulfilled]: () => false,\r\n  //get contacts api\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.rejected]: () => false,\r\n  [fetchContacts.fulfilled]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n  loading,\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { logger } from 'redux-logger';\r\n// забираю весь редюсер как файл\r\nimport contactReducer from './contacts/contactsReducer';\r\n\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: contactReducer,\r\n  middleware,\r\n  devTools: true,\r\n});","\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = (state) => state.contacts;\r\nexport const getFilter = (state) => state.filter;\r\n\r\nexport const getVisibleContact = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(\r\n      (contact) =>\r\n        contact.name.toLowerCase().includes(normalizedFilter) ||\r\n        contact.phone.includes(filter),\r\n    );\r\n  },\r\n);","// import react, { Component } from \"react\";\r\nimport { useState } from 'react';\r\n// import shortid from 'shortid';\r\nimport f from './Contacts.module.css';\r\nimport { addContacts } from '../../redux/contacts/contactsOperations'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getContacts } from '../../redux/contacts/contactsSelectors';\r\n\r\n\r\nexport default function InputForm() {\r\n\r\n \r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n//  const nameInputId = shortid.generate();\r\n//   const numberInputId = shortid.generate();\r\n  \r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(state => getContacts(state));\r\n\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n const handleSubmit = e => {\r\n   e.preventDefault();\r\n   \r\n      if (contacts.map(contact => contact.name).includes(name)) {\r\n      alert(`Sorry,  ${name} is already in contacs.`);\r\n      return;\r\n    }\r\n   \r\n  \r\n   const addContactOnSubmit = {\r\n     name,\r\n     number,\r\n    //  id: shortid.generate(),\r\n   }\r\n   dispatch(addContacts(addContactOnSubmit));\r\n    setName('');\r\n    setNumber('');\r\n\r\n    };\r\n\r\n   \r\n\r\n  return (\r\n     <div className={f.forma}>\r\n          <form onSubmit={handleSubmit} >\r\n          <label className={f.forma__label} >\r\n            NAME\r\n            <input className={f.forma__input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              value={name}\r\n              onChange={handleInputChange}\r\n                        // id={nameInputId}\r\n            />\r\n          </label>\r\n\r\n          <label className={f.forma__label} >\r\n            NUMBER\r\n            <input className={f.forma__input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              value={number}\r\n                        onChange={handleInputChange}\r\n                        // id={numberInputId}\r\n            />\r\n          </label>\r\n\r\n          <button className={f.forma__btn} type=\"submit\">Add Contact</button>\r\n        </form>\r\n</div>\r\n   )\r\n}\r\n\r\n\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css'\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContacts } from '../../redux/contacts/contactsOperations';\r\n\r\nexport default function ContactItem({ id, name, number }) {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n        <li className={s.contact}>\r\n            <span className={s.contact__item}>{name}</span>\r\n            <span className={s.contact__item}>{number}</span>\r\n             <button className={s.contact__btn}  type=\"button\" onClick={() => dispatch(deleteContacts(id))} >Delete</button>    \r\n            </li>\r\n        </>\r\n        )\r\n};\r\n\r\nContactItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n   \r\n};","\r\nimport ContactItem from './ContactTemplate'\r\nimport { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n import { fetchContacts } from '../../redux/contacts/contactsOperations';\r\nimport { getVisibleContact } from '../../redux/contacts/contactsSelectors';\r\n\r\nexport default function ContactList() {\r\n    const contacts = useSelector(getVisibleContact);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchContacts());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <ul > {\r\n            contacts.map(({ id, name, number }) => (\r\n                <ContactItem\r\n                    key={id}\r\n                    id={id}\r\n                    name={name}\r\n                    number={number}\r\n          \r\n                />\r\n            ))\r\n        }\r\n       \r\n            </ul> \r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array,\r\n}\r\n \r\n\r\n","import shortid from \"shortid\";\r\n// import PropTypes from 'prop-types';\r\nimport f from './Filter.module.css';\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { filterContacts } from \"../../redux/contacts/contactsActions\";\r\n\r\nexport default function Filter() {\r\n    const filter = useSelector(state => state.filter);\r\n    const dispatch = useDispatch();\r\n    const filteredID = shortid.generate();\r\n    return (\r\n        <>\r\n            <label htmlFor={filteredID}>Find contacts by name\r\n                <input type=\"text\"\r\n                    id={filteredID}\r\n                    value={filter}\r\n                    onChange={e => dispatch(filterContacts(e.target.value))}\r\n                    className={f.filter__input}\r\n                \r\n                />\r\n            \r\n            </label>\r\n        </>\r\n    );\r\n};\r\n\r\n// Filter.propTypes = {\r\n//     value: PropTypes.string,\r\n//     onchange: PropTypes.func,\r\n// }","import InputForm from './Components/ContactForm';\nimport { ContactList } from './Components/ContactList';\nimport Filter from './Components/FilterInput';\nimport s from './Components/ContactForm/Contacts.module.css';\n\n// const initialContacts = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\nexport default function App() {\n  return (\n    <div className={s.container}>\n      <h1>Phonebook</h1>\n      <InputForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/store';\n\nimport './index.css';\nimport App from './App';\n\nReactDom.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import { Provider } from 'react-redux';\n// import data from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={data.store}>\n//       <PersistGate loading={null} persistor={data.persistor}>\n//         <App />\n//         </PersistGate>\n//   </Provider>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Contacts_container__aFAHH\",\"forma__input\":\"Contacts_forma__input__1-5YA\",\"forma__btn\":\"Contacts_forma__btn__3OPNx\",\"forma__label\":\"Contacts_forma__label__3FlLo\"};"],"sourceRoot":""}